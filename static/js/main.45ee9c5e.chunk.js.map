{"version":3,"sources":["assets/audio/piano-1.mp3","assets/audio/piano-2.mp3","assets/audio/piano-3.mp3","assets/audio/piano-4.mp3","assets/audio/piano-5.mp3","assets/audio/three.mp3","assets/audio/bell-1.mp3","assets/audio/bell-2.mp3","assets/audio/bell-3.mp3","assets/audio/soundA.wav","assets/audio/soundB.wav","assets/audio/soundC.wav","assets/audio/soundD.wav","assets/audio/soundE.wav","assets/audio/soundF.flac","assets/audio/soundG.wav","assets/audio/soundH.wav","assets/audio/soundI.wav","containers/Frame.js","serviceWorker.js","index.js"],"names":["module","exports","audioClip","sound","sound1","label","sound2","sound3","sound4","sound5","sound6","sound7","sound8","sound9","soundA","soundB","soundC","soundD","soundE","soundF","soundG","soundH","soundI","Frame","state","setOfSounds","firstBoard","soundPlay","src","Howl","play","keyPressHandler","event","key","toggleBoard","Btns1","map","cur","i","className","id","onClick","Btns2","setState","this","document","body","addEventListener","Howler","volume","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.45ee9c5e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/piano-1.faafa8b5.mp3\";","module.exports = __webpack_public_path__ + \"static/media/piano-2.c2f1538a.mp3\";","module.exports = __webpack_public_path__ + \"static/media/piano-3.11b3ac56.mp3\";","module.exports = __webpack_public_path__ + \"static/media/piano-4.241c9c88.mp3\";","module.exports = __webpack_public_path__ + \"static/media/piano-5.8f0e21a2.mp3\";","module.exports = __webpack_public_path__ + \"static/media/three.9e85ad58.mp3\";","module.exports = __webpack_public_path__ + \"static/media/bell-1.7658f906.mp3\";","module.exports = __webpack_public_path__ + \"static/media/bell-2.27592ab5.mp3\";","module.exports = __webpack_public_path__ + \"static/media/bell-3.05cb6423.mp3\";","module.exports = __webpack_public_path__ + \"static/media/soundA.4679bba5.wav\";","module.exports = __webpack_public_path__ + \"static/media/soundB.04c3225c.wav\";","module.exports = __webpack_public_path__ + \"static/media/soundC.9632ac56.wav\";","module.exports = __webpack_public_path__ + \"static/media/soundD.9db9cfca.wav\";","module.exports = __webpack_public_path__ + \"static/media/soundE.d24b097c.wav\";","module.exports = __webpack_public_path__ + \"static/media/soundF.e6239126.flac\";","module.exports = __webpack_public_path__ + \"static/media/soundG.fdc8edaa.wav\";","module.exports = __webpack_public_path__ + \"static/media/soundH.0deb6a9e.wav\";","module.exports = __webpack_public_path__ + \"static/media/soundI.e4b0cdec.wav\";","import React, {Component} from 'react';\nimport './Frame.css';\n\nimport sound1 from '../assets/audio/piano-1.mp3';\nimport sound2 from '../assets/audio/piano-2.mp3';\nimport sound3 from '../assets/audio/piano-3.mp3';\nimport sound4 from '../assets/audio/piano-4.mp3';\nimport sound5 from '../assets/audio/piano-5.mp3';\nimport sound6 from '../assets/audio/three.mp3';\nimport sound7 from '../assets/audio/bell-1.mp3';\nimport sound8 from '../assets/audio/bell-2.mp3';\nimport sound9 from '../assets/audio/bell-3.mp3';\nimport soundA from '../assets/audio/soundA.wav';\nimport soundB from '../assets/audio/soundB.wav';\nimport soundC from '../assets/audio/soundC.wav';\nimport soundD from '../assets/audio/soundD.wav';\nimport soundE from '../assets/audio/soundE.wav';\nimport soundF from '../assets/audio/soundF.flac';\nimport soundG from '../assets/audio/soundG.wav';\nimport soundH from '../assets/audio/soundH.wav';\nimport soundI from '../assets/audio/soundI.wav';\n\nimport {Howl, Howler} from 'howler';\n\nconst audioClip = [\n    {sound: sound1, label: 'Q'},\n    {sound: sound2, label: 'W'},\n    {sound: sound3, label: 'E'},\n    {sound: sound4, label: 'A'},\n    {sound: sound5, label: 'S'},\n    {sound: sound6, label: 'D'},\n    {sound: sound7, label: 'Z'},\n    {sound: sound8, label: 'X'},\n    {sound: sound9, label: 'C'},\n    {sound: soundA, label: 'Q'},\n    {sound: soundB, label: 'W'},\n    {sound: soundC, label: 'E'},\n    {sound: soundD, label: 'A'},\n    {sound: soundE, label: 'S'},\n    {sound: soundF, label: 'D'},\n    {sound: soundG, label: 'Z'},\n    {sound: soundH, label: 'X'},\n    {sound: soundI, label: 'C'}\n]\nclass Frame extends Component {\n    state = {\n        setOfSounds: [],\n        firstBoard: true\n    }\n\n  soundPlay = (src) => {\n      const sound = new Howl({\n          src\n      })\n      sound.play();\n  }\n\n  keyPressHandler = (event) => {\n    if (event.key === 'j'){this.toggleBoard()}\n    if (this.state.firstBoard) {\n        switch(event.key) {\n              case 'q':\n                  this.soundPlay(audioClip[0].sound);\n                  break;\n              case  'w':\n                  this.soundPlay(audioClip[1].sound);\n                  break;\n              case 'e':\n                  this.soundPlay(audioClip[2].sound);\n                  break;\n              case  'a':\n                  this.soundPlay(audioClip[3].sound);\n                  break;\n              case 's':\n                  this.soundPlay(audioClip[4].sound);\n                  break;\n              case  'd':\n                  this.soundPlay(audioClip[5].sound);\n                  break;\n              case 'z':\n                  this.soundPlay(audioClip[6].sound);\n                  break;\n              case  'x':\n                  this.soundPlay(audioClip[7].sound);\n                  break;\n              case  'c':\n                  this.soundPlay(audioClip[8].sound);\n                  break;\n              default:\n                  return;\n            }\n            \n      } else if (!this.state.firstBoard){\n        switch(event.key) {\n            case 'q':\n                this.soundPlay(audioClip[9].sound);\n                break;\n            case  'w':\n                this.soundPlay(audioClip[10].sound);\n                break;\n            case 'e':\n                this.soundPlay(audioClip[11].sound);\n                break;\n            case  'a':\n                this.soundPlay(audioClip[12].sound);\n                break;\n            case 's':\n                this.soundPlay(audioClip[13].sound);\n                break;\n            case  'd':\n                this.soundPlay(audioClip[14].sound);\n                break;\n            case 'z':\n                this.soundPlay(audioClip[15].sound);\n                break;\n            case  'x':\n                this.soundPlay(audioClip[16].sound);\n                break;\n            case  'c':\n                this.soundPlay(audioClip[17].sound);\n                break;\n            default:\n               return;\n          }\n      }\n  }\n\n    Btns1 = () => {\n        return audioClip.map((cur, i) => {\n            if (i <= 8) {\n                return (<button key={i} className='btn' id={`sound${i}`} onClick={() => this.soundPlay(cur.sound)} > {cur.label} </button>\n                )\n            }\n        })\n    }\n\n    Btns2 = () => {\n        return audioClip.map((cur, i) => {\n            if (i > 8) {\n                return (<button key={i} className='btn' id={`sound${i}`} onClick={() => this.soundPlay(cur.sound)} > {cur.label} </button>\n                )\n            }\n        })\n    }\n\n    componentDidMount() {\n        this.setState({setOfSounds: this.Btns1()});\n        document.body.addEventListener('keydown', this.keyPressHandler);\n    }\n\n    toggleBoard = () => {\n        if (this.state.firstBoard) {\n            this.setState({firstBoard: false, setOfSounds: this.Btns2()});\n        } else {\n            this.setState({firstBoard: true, setOfSounds: this.Btns1()});\n        }\n    }\n\n    // changeBtnHandler = (event) => {\n        // let update, firstBoard;\n\n        // switch(event.target.value) {\n        //     case 'BoardA':\n        //         update = this.Btns1();\n        //         firstBoard = true;\n        //         break;\n        //     case 'BoardB':\n        //         update = this.Btns2();\n        //         firstBoard = false;\n        //         break;\n        //     default:\n        //         update = this.Btns1();\n        //         firstBoard = true;\n        // }\n\n        // this.setState({setOfSounds: update, firstBoard: firstBoard});\n    // }\n\n    render() {\n        Howler.volume(1.0)\n        return (\n            <div className='background'>\n                <div id=\"stage\">\n                    {/* <button  class='btn' id='sound0' onClick={() => this.soundPlay(audioClip[0].sound)} > {audioClip[0].label} </button>\n                    */}\n                    {this.state.setOfSounds}\n                </div>\n\n                <div className='options'><span>{this.state.firstBoard ? 'Board 1' : 'Board 2'}</span> <br></br> <span>press 'J'</span></div>\n\n                {/* <div className='options' onChange={(event)=> this.changeBtnHandler(event)}>\n                    <input id='one' type='radio' value='BoardA' name='sound' defaultChecked />\n                    <label htmlFor='one'>Board A</label>\n                    <br></br>\n                    <input id='two' type='radio' value='BoardB' name='sound' />\n                    <label htmlFor='two'>Board B</label>\n                </div> */}\n            </div>\n        );\n    };\n};\n\nexport default Frame;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Frame from './containers/Frame';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Frame />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}